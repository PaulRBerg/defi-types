/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface FiatTokenV2Interface extends ethers.utils.Interface {
  functions: {
    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "CANCEL_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "authorizationState(address,bytes32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklist(address)": FunctionFragment;
    "blacklister()": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "configureMinter(address,uint256)": FunctionFragment;
    "currency()": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "initialize(string,string,string,uint8,address,address,address,address)": FunctionFragment;
    "initializeV2(string)": FunctionFragment;
    "isBlacklisted(address)": FunctionFragment;
    "isMinter(address)": FunctionFragment;
    "masterMinter()": FunctionFragment;
    "mint(address,uint256)": FunctionFragment;
    "minterAllowance(address)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "removeMinter(address)": FunctionFragment;
    "rescueERC20(address,address,uint256)": FunctionFragment;
    "rescuer()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "unBlacklist(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updateBlacklister(address)": FunctionFragment;
    "updateMasterMinter(address)": FunctionFragment;
    "updatePauser(address)": FunctionFragment;
    "updateRescuer(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CANCEL_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizationState",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "blacklist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklister",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "cancelAuthorization",
    values: [string, BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "configureMinter",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "currency", values?: undefined): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowanceWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowanceWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isMinter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "masterMinter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minterAllowance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "rescueERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rescuer", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWithAuthorization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "unBlacklist", values: [string]): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBlacklister",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMasterMinter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRescuer",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CANCEL_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRANSFER_WITH_AUTHORIZATION_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "currency", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowanceWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowanceWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "masterMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minterAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rescueERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rescuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWithAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unBlacklist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlacklister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMasterMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRescuer",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "AuthorizationCanceled(address,bytes32)": EventFragment;
    "AuthorizationUsed(address,bytes32)": EventFragment;
    "Blacklisted(address)": EventFragment;
    "BlacklisterChanged(address)": EventFragment;
    "Burn(address,uint256)": EventFragment;
    "MasterMinterChanged(address)": EventFragment;
    "Mint(address,address,uint256)": EventFragment;
    "MinterConfigured(address,uint256)": EventFragment;
    "MinterRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause()": EventFragment;
    "PauserChanged(address)": EventFragment;
    "RescuerChanged(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnBlacklisted(address)": EventFragment;
    "Unpause()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuthorizationUsed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlacklisterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MasterMinterChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterConfigured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinterRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RescuerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
}

export class FiatTokenV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: FiatTokenV2Interface;

  functions: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blacklist(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "blacklist(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    blacklister(overrides?: CallOverrides): Promise<[string]>;

    "blacklister()"(overrides?: CallOverrides): Promise<[string]>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    configureMinter(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "configureMinter(address,uint256)"(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    currency(overrides?: CallOverrides): Promise<[string]>;

    "currency()"(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      decrement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      decrement: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowance(
      spender: string,
      increment: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      increment: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initialize(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(string,string,string,uint8,address,address,address,address)"(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    initializeV2(
      newName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initializeV2(string)"(
      newName: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    isBlacklisted(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isBlacklisted(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isMinter(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    masterMinter(overrides?: CallOverrides): Promise<[string]>;

    "masterMinter()"(overrides?: CallOverrides): Promise<[string]>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    minterAllowance(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "minterAllowance(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    "pauser()"(overrides?: CallOverrides): Promise<[string]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinter(
      minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeMinter(address)"(
      minter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    rescuer(overrides?: CallOverrides): Promise<[string]>;

    "rescuer()"(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unBlacklist(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unBlacklist(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateBlacklister(
      _newBlacklister: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateBlacklister(address)"(
      _newBlacklister: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateMasterMinter(
      _newMasterMinter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateMasterMinter(address)"(
      _newMasterMinter: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updatePauser(
      _newPauser: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updatePauser(address)"(
      _newPauser: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    updateRescuer(
      newRescuer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateRescuer(address)"(
      newRescuer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  APPROVE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "CANCEL_AUTHORIZATION_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
    overrides?: CallOverrides
  ): Promise<string>;

  "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
    overrides?: CallOverrides
  ): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  approveWithAuthorization(
    owner: string,
    spender: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  authorizationState(
    authorizer: string,
    nonce: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  "authorizationState(address,bytes32)"(
    authorizer: string,
    nonce: BytesLike,
    overrides?: CallOverrides
  ): Promise<number>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blacklist(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "blacklist(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  blacklister(overrides?: CallOverrides): Promise<string>;

  "blacklister()"(overrides?: CallOverrides): Promise<string>;

  burn(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelAuthorization(
    authorizer: string,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
    authorizer: string,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  configureMinter(
    minter: string,
    minterAllowedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "configureMinter(address,uint256)"(
    minter: string,
    minterAllowedAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  currency(overrides?: CallOverrides): Promise<string>;

  "currency()"(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    decrement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    decrement: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  decreaseAllowanceWithAuthorization(
    owner: string,
    spender: string,
    decrement: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    decrement: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowance(
    spender: string,
    increment: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    increment: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  increaseAllowanceWithAuthorization(
    owner: string,
    spender: string,
    increment: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    increment: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initialize(
    tokenName: string,
    tokenSymbol: string,
    tokenCurrency: string,
    tokenDecimals: BigNumberish,
    newMasterMinter: string,
    newPauser: string,
    newBlacklister: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(string,string,string,uint8,address,address,address,address)"(
    tokenName: string,
    tokenSymbol: string,
    tokenCurrency: string,
    tokenDecimals: BigNumberish,
    newMasterMinter: string,
    newPauser: string,
    newBlacklister: string,
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  initializeV2(
    newName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initializeV2(string)"(
    newName: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  isBlacklisted(_account: string, overrides?: CallOverrides): Promise<boolean>;

  "isBlacklisted(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isMinter(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  masterMinter(overrides?: CallOverrides): Promise<string>;

  "masterMinter()"(overrides?: CallOverrides): Promise<string>;

  mint(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "mint(address,uint256)"(
    _to: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  minterAllowance(
    minter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "minterAllowance(address)"(
    minter: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  "pauser()"(overrides?: CallOverrides): Promise<string>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinter(
    minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeMinter(address)"(
    minter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rescueERC20(
    tokenContract: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "rescueERC20(address,address,uint256)"(
    tokenContract: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  rescuer(overrides?: CallOverrides): Promise<string>;

  "rescuer()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferWithAuthorization(
    from: string,
    to: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
    from: string,
    to: string,
    value: BigNumberish,
    validAfter: BigNumberish,
    validBefore: BigNumberish,
    nonce: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unBlacklist(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unBlacklist(address)"(
    _account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateBlacklister(
    _newBlacklister: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateBlacklister(address)"(
    _newBlacklister: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateMasterMinter(
    _newMasterMinter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateMasterMinter(address)"(
    _newMasterMinter: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updatePauser(
    _newPauser: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updatePauser(address)"(
    _newPauser: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  updateRescuer(
    newRescuer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateRescuer(address)"(
    newRescuer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    CANCEL_AUTHORIZATION_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklist(_account: string, overrides?: CallOverrides): Promise<void>;

    "blacklist(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklister(overrides?: CallOverrides): Promise<string>;

    "blacklister()"(overrides?: CallOverrides): Promise<string>;

    burn(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    configureMinter(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "configureMinter(address,uint256)"(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currency(overrides?: CallOverrides): Promise<string>;

    "currency()"(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      decrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      decrement: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    increaseAllowance(
      spender: string,
      increment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      increment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(string,string,string,uint8,address,address,address,address)"(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(newName: string, overrides?: CallOverrides): Promise<void>;

    "initializeV2(string)"(
      newName: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isBlacklisted(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isBlacklisted(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isMinter(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    masterMinter(overrides?: CallOverrides): Promise<string>;

    "masterMinter()"(overrides?: CallOverrides): Promise<string>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minterAllowance(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minterAllowance(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    "pauser()"(overrides?: CallOverrides): Promise<string>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMinter(minter: string, overrides?: CallOverrides): Promise<boolean>;

    "removeMinter(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    rescuer(overrides?: CallOverrides): Promise<string>;

    "rescuer()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unBlacklist(_account: string, overrides?: CallOverrides): Promise<void>;

    "unBlacklist(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    updateBlacklister(
      _newBlacklister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateBlacklister(address)"(
      _newBlacklister: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMasterMinter(
      _newMasterMinter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateMasterMinter(address)"(
      _newMasterMinter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePauser(_newPauser: string, overrides?: CallOverrides): Promise<void>;

    "updatePauser(address)"(
      _newPauser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRescuer(newRescuer: string, overrides?: CallOverrides): Promise<void>;

    "updateRescuer(address)"(
      newRescuer: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuthorizationCanceled(
      authorizer: string | null,
      nonce: BytesLike | null
    ): EventFilter;

    AuthorizationUsed(
      authorizer: string | null,
      nonce: BytesLike | null
    ): EventFilter;

    Blacklisted(_account: string | null): EventFilter;

    BlacklisterChanged(newBlacklister: string | null): EventFilter;

    Burn(burner: string | null, amount: null): EventFilter;

    MasterMinterChanged(newMasterMinter: string | null): EventFilter;

    Mint(minter: string | null, to: string | null, amount: null): EventFilter;

    MinterConfigured(
      minter: string | null,
      minterAllowedAmount: null
    ): EventFilter;

    MinterRemoved(oldMinter: string | null): EventFilter;

    OwnershipTransferred(previousOwner: null, newOwner: null): EventFilter;

    Pause(): EventFilter;

    PauserChanged(newAddress: string | null): EventFilter;

    RescuerChanged(newRescuer: string | null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UnBlacklisted(_account: string | null): EventFilter;

    Unpause(): EventFilter;
  };

  estimateGas: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    CANCEL_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklist(_account: string, overrides?: Overrides): Promise<BigNumber>;

    "blacklist(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    blacklister(overrides?: CallOverrides): Promise<BigNumber>;

    "blacklister()"(overrides?: CallOverrides): Promise<BigNumber>;

    burn(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    configureMinter(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "configureMinter(address,uint256)"(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    currency(overrides?: CallOverrides): Promise<BigNumber>;

    "currency()"(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      decrement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      decrement: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      increment: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      increment: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initialize(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(string,string,string,uint8,address,address,address,address)"(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    initializeV2(newName: string, overrides?: Overrides): Promise<BigNumber>;

    "initializeV2(string)"(
      newName: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    isBlacklisted(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isBlacklisted(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMinter(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterMinter(overrides?: CallOverrides): Promise<BigNumber>;

    "masterMinter()"(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    minterAllowance(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "minterAllowance(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    "pauser()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    removeMinter(minter: string, overrides?: Overrides): Promise<BigNumber>;

    "removeMinter(address)"(
      minter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    rescuer(overrides?: CallOverrides): Promise<BigNumber>;

    "rescuer()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unBlacklist(_account: string, overrides?: Overrides): Promise<BigNumber>;

    "unBlacklist(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    updateBlacklister(
      _newBlacklister: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateBlacklister(address)"(
      _newBlacklister: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateMasterMinter(
      _newMasterMinter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateMasterMinter(address)"(
      _newMasterMinter: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updatePauser(_newPauser: string, overrides?: Overrides): Promise<BigNumber>;

    "updatePauser(address)"(
      _newPauser: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    updateRescuer(
      newRescuer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateRescuer(address)"(
      newRescuer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APPROVE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "APPROVE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CANCEL_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "CANCEL_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DECREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "INCREASE_ALLOWANCE_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TRANSFER_WITH_AUTHORIZATION_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "TRANSFER_WITH_AUTHORIZATION_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    approveWithAuthorization(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    authorizationState(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "authorizationState(address,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklist(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "blacklist(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    blacklister(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "blacklister()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelAuthorization(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelAuthorization(address,bytes32,uint8,bytes32,bytes32)"(
      authorizer: string,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    configureMinter(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "configureMinter(address,uint256)"(
      minter: string,
      minterAllowedAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    currency(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currency()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      decrement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      decrement: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    decreaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      decrement: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      increment: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      increment: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    increaseAllowanceWithAuthorization(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowanceWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      increment: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initialize(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(string,string,string,uint8,address,address,address,address)"(
      tokenName: string,
      tokenSymbol: string,
      tokenCurrency: string,
      tokenDecimals: BigNumberish,
      newMasterMinter: string,
      newPauser: string,
      newBlacklister: string,
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    initializeV2(
      newName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initializeV2(string)"(
      newName: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    isBlacklisted(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isBlacklisted(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMinter(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMinter(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterMinter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "mint(address,uint256)"(
      _to: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    minterAllowance(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minterAllowance(address)"(
      minter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pauser()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    removeMinter(
      minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeMinter(address)"(
      minter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rescueERC20(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "rescueERC20(address,address,uint256)"(
      tokenContract: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    rescuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rescuer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferWithAuthorization(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferWithAuthorization(address,address,uint256,uint256,uint256,bytes32,uint8,bytes32,bytes32)"(
      from: string,
      to: string,
      value: BigNumberish,
      validAfter: BigNumberish,
      validBefore: BigNumberish,
      nonce: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unBlacklist(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unBlacklist(address)"(
      _account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateBlacklister(
      _newBlacklister: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateBlacklister(address)"(
      _newBlacklister: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateMasterMinter(
      _newMasterMinter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateMasterMinter(address)"(
      _newMasterMinter: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updatePauser(
      _newPauser: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updatePauser(address)"(
      _newPauser: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    updateRescuer(
      newRescuer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateRescuer(address)"(
      newRescuer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
